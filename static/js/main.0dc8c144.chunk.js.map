{"version":3,"sources":["index.js"],"names":["StarsDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","StarMatch","gameId","setGameId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dc8c144.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport './index.css';\r\n\r\n//The comments contain some of my notes I took while learning React with the\r\n//React tutorials on PluralSight https://www.pluralsight.com/paths/react\r\n//I don't own this code\r\n\r\n//display all stars here\r\n//key for dynamic child\r\nconst StarsDisplay = props => (\r\n    <>\r\n    {utils.range(1, props.count).map(starId =>\r\n            <div key={starId} className=\"star\" />\r\n     )}\r\n    </>\r\n);\r\n\r\n//DO not name your components with Number!! it's a reserved keyword\r\n//tip: name components with two words to avoid overriding top level javascript objects\r\n//click handler fxn closes over the scope of its owner and gets access to its props\r\n//rmb to refresh scope of closure when needed\r\n//see jscomplete.com/closures for more info\r\n\r\n//a number button\r\nconst PlayNumber = props => (\r\n    <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n);\r\n\r\nconst PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <div className=\"message\"\r\n            style={{color: props.gameStatus === 'lost' ? 'red' : 'green' }}\r\n        >\r\n            {props.gameStatus === 'lost' ? 'Game Over' : 'You Win!'}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n\r\n);\r\n\r\n//Custom Hook. contains state logic for game\r\n//stateful function -> by convention, prefix function name with 'use'\r\n//Rule of hooks: always use the react hooks function in the same order. Can't call them in loops/conditions\r\nconst useGameState = () => {\r\n    //Tip: for first draft, if you have UI elements that change, it's good to start by adding a state\r\n    const [stars, setStars] = useState(utils.random(1, 9)); //state hook\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9)); //Tip: use mock data to test UI\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    \r\n    //avoid for/while loops if you can. map/filter/reduce are more elegant and flexible\r\n    //minimize stuff in states as much as possible. Calculate other values if needed\r\n\r\n    //Add side effects\r\n    //Runs every time the owner component renders itself\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {  //call a new timer\r\n                setSecondsLeft(secondsLeft - 1); //sets state. will re-render. makes a loop\r\n            }, 1000);\r\n\r\n            //\"clean\" side effect when it's no longer needed\r\n            return () => clearTimeout(timerId); //delete timer\r\n            //Bug in tutorial: timer 'stops' if you click on a number repeatedly\r\n        }\r\n    });\r\n\r\n    //set state whenever button is clicked\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) { //wrong answer\r\n            setCandidateNums(newCandidateNums);\r\n        } else { //correct choice. reset available and candidate nums, redraw stars\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n\r\n            //only redraw a playable number of stars\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n\r\n    //Game component needs stars, availableNums, candidateNums, secondsLeft, access to setGameState\r\n    return {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState,\r\n    };\r\n}\r\n\r\n\r\nconst Game = (props) => {\r\n    //destructure elements needed from game state\r\n    const {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState,\r\n    } = useGameState();\r\n\r\n    const buttons = 9;\r\n\r\n    //sum of selected numbers are greater than the number of stars\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const gameStatus = availableNums.length === 0 ? 'won' :\r\n        (secondsLeft === 0 ? 'lost' : 'active');\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (gameStatus !== 'active' || currentStatus === 'used')\r\n            return;\r\n\r\n        //add candidate to array OR deselect wrong candidate number\r\n        const newCandidateNums =\r\n            currentStatus === 'available' ?\r\n                candidateNums.concat(number)\r\n                : candidateNums.filter(cn => cn !== number);\r\n\r\n        setGameState(newCandidateNums); //set state whenever button clicked\r\n    };\r\n\r\n    //Readability Tip: don't do any computations within return statement\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more digits that sum to the number of stars. \r\n                You can only use each digit once. Use up all of the digits to win!\r\n            </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameStatus !== 'active' ?\r\n                        <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/> : <StarsDisplay count={stars} />\r\n                    }      \r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, buttons).map(number =>\r\n                        <PlayNumber\r\n                            key={number}\r\n                            status={numberStatus(number)}\r\n                            number={number}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//each StarMatch component represents a single game\r\nconst StarMatch = () => {\r\n    const [gameId, setGameId] = useState(1);\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />; \r\n    //to make a new game, change key. each key corresponds to one component\r\n    //By unmounting and remounting StarMatch components,\r\n    //you reset states and any side effects\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\nReactDOM.render(<StarMatch />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}